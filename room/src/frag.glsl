uniform vec2 resolution;
uniform vec3 objectColor;
uniform float deformationFrequency;
uniform float deformationAmount;
uniform vec3 camera;
uniform vec4 metaballs[20];
uniform sampler2D texture;
uniform samplerCube cubemap;
void main ()
{
  vec3 color_1;
  float uvLength_2;
  float aspect_3;
  vec2 uv_4;
  vec2 tmpvar_5;
  tmpvar_5 = ((gl_FragCoord.xy / resolution) - 0.5);
  uv_4.y = tmpvar_5.y;
  uv_4.x = (tmpvar_5.x * (resolution.x / resolution.y));
  aspect_3 = (resolution.x / resolution.y);
  uvLength_2 = sqrt(dot (uv_4, uv_4));
  vec3 tmpvar_6;
  tmpvar_6.z = 1.0;
  tmpvar_6.xy = uv_4;
  bool tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_7 = bool(0);
  vec3 tmpvar_9;
  tmpvar_9 = ((vec3(-7.0, -7.0, -10.0) - camera) / tmpvar_6);
  vec3 tmpvar_10;
  tmpvar_10 = ((vec3(7.0, 7.0, 2.0) - camera) / tmpvar_6);
  vec3 tmpvar_11;
  tmpvar_11 = max (tmpvar_10, tmpvar_9);
  vec3 tmpvar_12;
  tmpvar_12 = min (tmpvar_10, tmpvar_9);
  float tmpvar_13;
  tmpvar_13 = min (tmpvar_11.x, min (tmpvar_11.y, tmpvar_11.z));
  float tmpvar_14;
  tmpvar_14 = max (max (tmpvar_12.x, 0.0), max (tmpvar_12.y, tmpvar_12.z));
  if ((tmpvar_13 > tmpvar_14)) {
    vec3 tmpvar_15;
    tmpvar_15 = tmpvar_6;
    float val_16;
    bool tmpvar_17;
    bool tmpvar_18;
    tmpvar_18 = bool(0);
    int i_19;
    float left_20;
    vec3 point_21;
    float time_22;
    float step_23;
    step_23 = ((tmpvar_13 - tmpvar_14) / 15.0);
    time_22 = tmpvar_14;
    vec3 tmpvar_24;
    tmpvar_24 = (camera + (tmpvar_14 * tmpvar_6));
    point_21 = tmpvar_24;
    vec3 point_25;
    point_25 = tmpvar_24;
    int i_26;
    float distance_27;
    distance_27 = 0.0;
    i_26 = 0;
    for (int i_26 = 0; i_26 < 20; i_26++) {
      vec3 tmpvar_28;
      tmpvar_28 = (point_25 - metaballs[i_26].xyz);
      distance_27 = (distance_27 + (metaballs[i_26].w / (((tmpvar_28.x * tmpvar_28.x) + (tmpvar_28.y * tmpvar_28.y)) + (tmpvar_28.z * tmpvar_28.z))));
      //i_26 = (i_26 + 1);
    };
    float tmpvar_29;
    tmpvar_29 = ((((sin((deformationFrequency * tmpvar_24.x)) * deformationAmount) * (sin((deformationFrequency * tmpvar_24.y)) * deformationAmount)) * (sin((deformationFrequency * tmpvar_24.z)) * deformationAmount)) + (2.0 - distance_27));
    distance_27 = tmpvar_29;
    left_20 = tmpvar_29;
    i_19 = 0;
    for (int i_19 = 0; i_19 < 15; i_19++) {
      float tmpvar_30;
      tmpvar_30 = (time_22 + step_23);
      time_22 = tmpvar_30;
      vec3 tmpvar_31;
      tmpvar_31 = (point_21 + (step_23 * tmpvar_15));
      point_21 = tmpvar_31;
      vec3 point_32;
      point_32 = tmpvar_31;
      int i_33;
      float distance_34;
      distance_34 = 0.0;
      i_33 = 0;
      for (int i_33 = 0; i_33 < 20; i_33++) {
        vec3 tmpvar_35;
        tmpvar_35 = (point_32 - metaballs[i_33].xyz);
        distance_34 = (distance_34 + (metaballs[i_33].w / (((tmpvar_35.x * tmpvar_35.x) + (tmpvar_35.y * tmpvar_35.y)) + (tmpvar_35.z * tmpvar_35.z))));
        //i_33 = (i_33 + 1);
      };
      float tmpvar_36;
      tmpvar_36 = ((((sin((deformationFrequency * tmpvar_31.x)) * deformationAmount) * (sin((deformationFrequency * tmpvar_31.y)) * deformationAmount)) * (sin((deformationFrequency * tmpvar_31.z)) * deformationAmount)) + (2.0 - distance_34));
      distance_34 = tmpvar_36;
      if (((left_20 * tmpvar_36) < 0.0)) {
        val_16 = (tmpvar_30 + ((tmpvar_36 * step_23) / (left_20 - tmpvar_36)));
        tmpvar_17 = bool(1);
        tmpvar_18 = bool(1);
        break;
      };
      left_20 = tmpvar_36;
      //i_19 = (i_19 + 1);
    };
    if (!(tmpvar_18)) {
      tmpvar_17 = bool(0);
      tmpvar_18 = bool(1);
    };
    if (tmpvar_17) {
      vec3 tmpvar_37;
      tmpvar_37 = (camera + (tmpvar_6 * val_16));
      vec3 point_38;
      point_38 = (tmpvar_37 + vec3(0.01, 0.0, 0.0));
      int i_39;
      float distance_40;
      distance_40 = 0.0;
      i_39 = 0;
      for (int i_39 = 0; i_39 < 20; i_39++) {
        vec3 tmpvar_41;
        tmpvar_41 = (point_38 - metaballs[i_39].xyz);
        distance_40 = (distance_40 + (metaballs[i_39].w / (((tmpvar_41.x * tmpvar_41.x) + (tmpvar_41.y * tmpvar_41.y)) + (tmpvar_41.z * tmpvar_41.z))));
        //i_39 = (i_39 + 1);
      };
      float tmpvar_42;
      tmpvar_42 = ((((sin((deformationFrequency * point_38.x)) * deformationAmount) * (sin((deformationFrequency * point_38.y)) * deformationAmount)) * (sin((deformationFrequency * point_38.z)) * deformationAmount)) + (2.0 - distance_40));
      distance_40 = tmpvar_42;
      vec3 point_43;
      point_43 = (tmpvar_37 - vec3(0.01, 0.0, 0.0));
      int i_44;
      float distance_45;
      distance_45 = 0.0;
      i_44 = 0;
      for (int i_44 = 0; i_44 < 20; i_44++) {
        vec3 tmpvar_46;
        tmpvar_46 = (point_43 - metaballs[i_44].xyz);
        distance_45 = (distance_45 + (metaballs[i_44].w / (((tmpvar_46.x * tmpvar_46.x) + (tmpvar_46.y * tmpvar_46.y)) + (tmpvar_46.z * tmpvar_46.z))));
        //i_44 = (i_44 + 1);
      };
      float tmpvar_47;
      tmpvar_47 = ((((sin((deformationFrequency * point_43.x)) * deformationAmount) * (sin((deformationFrequency * point_43.y)) * deformationAmount)) * (sin((deformationFrequency * point_43.z)) * deformationAmount)) + (2.0 - distance_45));
      distance_45 = tmpvar_47;
      vec3 point_48;
      point_48 = (tmpvar_37 + vec3(0.0, 0.01, 0.0));
      int i_49;
      float distance_50;
      distance_50 = 0.0;
      i_49 = 0;
      for (int i_49 = 0; i_49 < 20; i_49++) {
        vec3 tmpvar_51;
        tmpvar_51 = (point_48 - metaballs[i_49].xyz);
        distance_50 = (distance_50 + (metaballs[i_49].w / (((tmpvar_51.x * tmpvar_51.x) + (tmpvar_51.y * tmpvar_51.y)) + (tmpvar_51.z * tmpvar_51.z))));
        //i_49 = (i_49 + 1);
      };
      float tmpvar_52;
      tmpvar_52 = ((((sin((deformationFrequency * point_48.x)) * deformationAmount) * (sin((deformationFrequency * point_48.y)) * deformationAmount)) * (sin((deformationFrequency * point_48.z)) * deformationAmount)) + (2.0 - distance_50));
      distance_50 = tmpvar_52;
      vec3 point_53;
      point_53 = (tmpvar_37 - vec3(0.0, 0.01, 0.0));
      int i_54;
      float distance_55;
      distance_55 = 0.0;
      i_54 = 0;
      for (int i_54 = 0; i_54 < 20; i_54++) {
        vec3 tmpvar_56;
        tmpvar_56 = (point_53 - metaballs[i_54].xyz);
        distance_55 = (distance_55 + (metaballs[i_54].w / (((tmpvar_56.x * tmpvar_56.x) + (tmpvar_56.y * tmpvar_56.y)) + (tmpvar_56.z * tmpvar_56.z))));
        //i_54 = (i_54 + 1);
      };
      float tmpvar_57;
      tmpvar_57 = ((((sin((deformationFrequency * point_53.x)) * deformationAmount) * (sin((deformationFrequency * point_53.y)) * deformationAmount)) * (sin((deformationFrequency * point_53.z)) * deformationAmount)) + (2.0 - distance_55));
      distance_55 = tmpvar_57;
      vec3 point_58;
      point_58 = (tmpvar_37 + vec3(0.0, 0.0, 0.01));
      int i_59;
      float distance_60;
      distance_60 = 0.0;
      i_59 = 0;
      for (int i_59 = 0; i_59 < 20; i_59++) {
        vec3 tmpvar_61;
        tmpvar_61 = (point_58 - metaballs[i_59].xyz);
        distance_60 = (distance_60 + (metaballs[i_59].w / (((tmpvar_61.x * tmpvar_61.x) + (tmpvar_61.y * tmpvar_61.y)) + (tmpvar_61.z * tmpvar_61.z))));
        //i_59 = (i_59 + 1);
      };
      float tmpvar_62;
      tmpvar_62 = ((((sin((deformationFrequency * point_58.x)) * deformationAmount) * (sin((deformationFrequency * point_58.y)) * deformationAmount)) * (sin((deformationFrequency * point_58.z)) * deformationAmount)) + (2.0 - distance_60));
      distance_60 = tmpvar_62;
      vec3 point_63;
      point_63 = (tmpvar_37 - vec3(0.0, 0.0, 0.01));
      int i_64;
      float distance_65;
      distance_65 = 0.0;
      i_64 = 0;
      for (int i_64 = 0; i_64 < 20; i_64++) {
        vec3 tmpvar_66;
        tmpvar_66 = (point_63 - metaballs[i_64].xyz);
        distance_65 = (distance_65 + (metaballs[i_64].w / (((tmpvar_66.x * tmpvar_66.x) + (tmpvar_66.y * tmpvar_66.y)) + (tmpvar_66.z * tmpvar_66.z))));
        //i_64 = (i_64 + 1);
      };
      float tmpvar_67;
      tmpvar_67 = ((((sin((deformationFrequency * point_63.x)) * deformationAmount) * (sin((deformationFrequency * point_63.y)) * deformationAmount)) * (sin((deformationFrequency * point_63.z)) * deformationAmount)) + (2.0 - distance_65));
      distance_65 = tmpvar_67;
      vec3 tmpvar_68;
      tmpvar_68.x = (tmpvar_42 - tmpvar_47);
      tmpvar_68.y = (tmpvar_52 - tmpvar_57);
      tmpvar_68.z = (tmpvar_62 - tmpvar_67);
      tmpvar_7 = bool(1);
      tmpvar_8 = normalize(tmpvar_68);
    };
  };
  float tmpvar_69;
  tmpvar_69 = (aspect_3 / 1.33333);
  vec2 tmpvar_70;
  tmpvar_70.y = 1.0;
  tmpvar_70.x = tmpvar_69;
  color_1 = texture2D (texture, (((gl_FragCoord.xy / tmpvar_69) / resolution) * tmpvar_70)).xyz;
  if (tmpvar_7) {
    vec3 refractionColor_71;
    vec3 tmpvar_72;
    tmpvar_72 = normalize(-(tmpvar_8));
    vec3 v_73;
    v_73 = tmpvar_72;
    float tmpvar_74;
    tmpvar_74 = max (max (abs(tmpvar_72.x), abs(tmpvar_72.y)), abs(tmpvar_72.z));
    float tmpvar_75;
    tmpvar_75 = abs(tmpvar_72.x);
    if ((tmpvar_75 != tmpvar_74)) {
      v_73.x = (tmpvar_72.x * 0.496094);
    };
    float tmpvar_76;
    tmpvar_76 = abs(tmpvar_72.y);
    if ((tmpvar_76 != tmpvar_74)) {
      v_73.y = (tmpvar_72.y * 0.496094);
    };
    float tmpvar_77;
    tmpvar_77 = abs(tmpvar_72.z);
    if ((tmpvar_77 != tmpvar_74)) {
      v_73.z = (tmpvar_72.z * 0.496094);
    };
    refractionColor_71 = textureCube (cubemap, v_73).xyz;
    vec3 tmpvar_78;
    tmpvar_78 = (refractionColor_71 * objectColor);
    refractionColor_71 = tmpvar_78;
    vec3 tmpvar_79;
    tmpvar_79 = normalize((tmpvar_6 - (2.0 * (dot (tmpvar_8, tmpvar_6) * tmpvar_8))));
    vec3 v_80;
    v_80 = tmpvar_79;
    float tmpvar_81;
    tmpvar_81 = max (max (abs(tmpvar_79.x), abs(tmpvar_79.y)), abs(tmpvar_79.z));
    float tmpvar_82;
    tmpvar_82 = abs(tmpvar_79.x);
    if ((tmpvar_82 != tmpvar_81)) {
      v_80.x = (tmpvar_79.x * 0.496094);
    };
    float tmpvar_83;
    tmpvar_83 = abs(tmpvar_79.y);
    if ((tmpvar_83 != tmpvar_81)) {
      v_80.y = (tmpvar_79.y * 0.496094);
    };
    float tmpvar_84;
    tmpvar_84 = abs(tmpvar_79.z);
    if ((tmpvar_84 != tmpvar_81)) {
      v_80.z = (tmpvar_79.z * 0.496094);
    };
    color_1 = pow (mix (tmpvar_78, textureCube (cubemap, v_80).xyz, 0.2), vec3(0.9, 0.9, 0.9));
  };
  vec3 tmpvar_85;
  tmpvar_85 = (color_1 - (pow (uvLength_2, 2.0) * 0.7));
  color_1 = tmpvar_85;
  vec4 tmpvar_86;
  tmpvar_86.w = 1.0;
  tmpvar_86.xyz = tmpvar_85;
  gl_FragColor = tmpvar_86;
}

