uniform vec2 resolution;
uniform vec3 objectColor;
uniform vec3 backgroundColor;
uniform vec3 baseLightColor;
uniform vec3 spotLightColor;
uniform vec3 spot2LightColor;
uniform float deformationFrequency;
uniform float deformationAmount;
uniform vec3 camera;
uniform vec4 metaballs[20];
void main ()
{
  vec3 color_1;
  float uvLength_2;
  vec2 uv_3;
  vec2 tmpvar_4;
  tmpvar_4 = ((gl_FragCoord.xy / resolution) - 0.5);
  uv_3.y = tmpvar_4.y;
  uv_3.x = (tmpvar_4.x * (resolution.x / resolution.y));
  uvLength_2 = sqrt(dot (uv_3, uv_3));
  vec3 tmpvar_5;
  tmpvar_5.z = 1.0;
  tmpvar_5.xy = uv_3;
  bool tmpvar_6;
  vec3 tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_6 = bool(0);
  vec3 tmpvar_9;
  tmpvar_9 = ((vec3(-7.0, -7.0, -10.0) - camera) / tmpvar_5);
  vec3 tmpvar_10;
  tmpvar_10 = ((vec3(7.0, 7.0, 2.0) - camera) / tmpvar_5);
  vec3 tmpvar_11;
  tmpvar_11 = max (tmpvar_10, tmpvar_9);
  vec3 tmpvar_12;
  tmpvar_12 = min (tmpvar_10, tmpvar_9);
  float tmpvar_13;
  tmpvar_13 = min (tmpvar_11.x, min (tmpvar_11.y, tmpvar_11.z));
  float tmpvar_14;
  tmpvar_14 = max (max (tmpvar_12.x, 0.0), max (tmpvar_12.y, tmpvar_12.z));
  if ((tmpvar_13 > tmpvar_14)) {
    vec3 tmpvar_15;
    tmpvar_15 = tmpvar_5;
    float val_16;
    bool tmpvar_17;
    bool tmpvar_18;
    tmpvar_18 = bool(0);
    int i_19;
    float left_20;
    vec3 point_21;
    float time_22;
    float step_23;
    step_23 = ((tmpvar_13 - tmpvar_14) / 15.0);
    time_22 = tmpvar_14;
    vec3 tmpvar_24;
    tmpvar_24 = (camera + (tmpvar_14 * tmpvar_5));
    point_21 = tmpvar_24;
    vec3 point_25;
    point_25 = tmpvar_24;
    int i_26;
    float distance_27;
    distance_27 = 0.0;
    i_26 = 0;
    for (int i_26 = 0; i_26 < 20; i_26++) {
      vec3 tmpvar_28;
      tmpvar_28 = (point_25 - metaballs[i_26].xyz);
      distance_27 = (distance_27 + (metaballs[i_26].w / (((tmpvar_28.x * tmpvar_28.x) + (tmpvar_28.y * tmpvar_28.y)) + (tmpvar_28.z * tmpvar_28.z))));
      //i_26 = (i_26 + 1);
    };
    float tmpvar_29;
    tmpvar_29 = ((((sin((deformationFrequency * tmpvar_24.x)) * deformationAmount) * (sin((deformationFrequency * tmpvar_24.y)) * deformationAmount)) * (sin((deformationFrequency * tmpvar_24.z)) * deformationAmount)) + (2.0 - distance_27));
    distance_27 = tmpvar_29;
    left_20 = tmpvar_29;
    i_19 = 0;
    for (int i_19 = 0; i_19 < 15; i_19++) {
      float tmpvar_30;
      tmpvar_30 = (time_22 + step_23);
      time_22 = tmpvar_30;
      vec3 tmpvar_31;
      tmpvar_31 = (point_21 + (step_23 * tmpvar_15));
      point_21 = tmpvar_31;
      vec3 point_32;
      point_32 = tmpvar_31;
      int i_33;
      float distance_34;
      distance_34 = 0.0;
      i_33 = 0;
      for (int i_33 = 0; i_33 < 20; i_33++) {
        vec3 tmpvar_35;
        tmpvar_35 = (point_32 - metaballs[i_33].xyz);
        distance_34 = (distance_34 + (metaballs[i_33].w / (((tmpvar_35.x * tmpvar_35.x) + (tmpvar_35.y * tmpvar_35.y)) + (tmpvar_35.z * tmpvar_35.z))));
        //i_33 = (i_33 + 1);
      };
      float tmpvar_36;
      tmpvar_36 = ((((sin((deformationFrequency * tmpvar_31.x)) * deformationAmount) * (sin((deformationFrequency * tmpvar_31.y)) * deformationAmount)) * (sin((deformationFrequency * tmpvar_31.z)) * deformationAmount)) + (2.0 - distance_34));
      distance_34 = tmpvar_36;
      if (((left_20 * tmpvar_36) < 0.0)) {
        val_16 = (tmpvar_30 + ((tmpvar_36 * step_23) / (left_20 - tmpvar_36)));
        tmpvar_17 = bool(1);
        tmpvar_18 = bool(1);
        break;
      };
      left_20 = tmpvar_36;
      //i_19 = (i_19 + 1);
    };
    if (!(tmpvar_18)) {
      tmpvar_17 = bool(0);
      tmpvar_18 = bool(1);
    };
    if (tmpvar_17) {
      vec3 tmpvar_37;
      tmpvar_37 = (camera + (tmpvar_5 * val_16));
      vec3 point_38;
      point_38 = (tmpvar_37 + vec3(0.01, 0.0, 0.0));
      int i_39;
      float distance_40;
      distance_40 = 0.0;
      i_39 = 0;
      for (int i_39 = 0; i_39 < 20; i_39++) {
        vec3 tmpvar_41;
        tmpvar_41 = (point_38 - metaballs[i_39].xyz);
        distance_40 = (distance_40 + (metaballs[i_39].w / (((tmpvar_41.x * tmpvar_41.x) + (tmpvar_41.y * tmpvar_41.y)) + (tmpvar_41.z * tmpvar_41.z))));
        //i_39 = (i_39 + 1);
      };
      float tmpvar_42;
      tmpvar_42 = ((((sin((deformationFrequency * point_38.x)) * deformationAmount) * (sin((deformationFrequency * point_38.y)) * deformationAmount)) * (sin((deformationFrequency * point_38.z)) * deformationAmount)) + (2.0 - distance_40));
      distance_40 = tmpvar_42;
      vec3 point_43;
      point_43 = (tmpvar_37 - vec3(0.01, 0.0, 0.0));
      int i_44;
      float distance_45;
      distance_45 = 0.0;
      i_44 = 0;
      for (int i_44 = 0; i_44 < 20; i_44++) {
        vec3 tmpvar_46;
        tmpvar_46 = (point_43 - metaballs[i_44].xyz);
        distance_45 = (distance_45 + (metaballs[i_44].w / (((tmpvar_46.x * tmpvar_46.x) + (tmpvar_46.y * tmpvar_46.y)) + (tmpvar_46.z * tmpvar_46.z))));
        //i_44 = (i_44 + 1);
      };
      float tmpvar_47;
      tmpvar_47 = ((((sin((deformationFrequency * point_43.x)) * deformationAmount) * (sin((deformationFrequency * point_43.y)) * deformationAmount)) * (sin((deformationFrequency * point_43.z)) * deformationAmount)) + (2.0 - distance_45));
      distance_45 = tmpvar_47;
      vec3 point_48;
      point_48 = (tmpvar_37 + vec3(0.0, 0.01, 0.0));
      int i_49;
      float distance_50;
      distance_50 = 0.0;
      i_49 = 0;
      for (int i_49 = 0; i_49 < 20; i_49++) {
        vec3 tmpvar_51;
        tmpvar_51 = (point_48 - metaballs[i_49].xyz);
        distance_50 = (distance_50 + (metaballs[i_49].w / (((tmpvar_51.x * tmpvar_51.x) + (tmpvar_51.y * tmpvar_51.y)) + (tmpvar_51.z * tmpvar_51.z))));
        //i_49 = (i_49 + 1);
      };
      float tmpvar_52;
      tmpvar_52 = ((((sin((deformationFrequency * point_48.x)) * deformationAmount) * (sin((deformationFrequency * point_48.y)) * deformationAmount)) * (sin((deformationFrequency * point_48.z)) * deformationAmount)) + (2.0 - distance_50));
      distance_50 = tmpvar_52;
      vec3 point_53;
      point_53 = (tmpvar_37 - vec3(0.0, 0.01, 0.0));
      int i_54;
      float distance_55;
      distance_55 = 0.0;
      i_54 = 0;
      for (int i_54 = 0; i_54 < 20; i_54++) {
        vec3 tmpvar_56;
        tmpvar_56 = (point_53 - metaballs[i_54].xyz);
        distance_55 = (distance_55 + (metaballs[i_54].w / (((tmpvar_56.x * tmpvar_56.x) + (tmpvar_56.y * tmpvar_56.y)) + (tmpvar_56.z * tmpvar_56.z))));
        //i_54 = (i_54 + 1);
      };
      float tmpvar_57;
      tmpvar_57 = ((((sin((deformationFrequency * point_53.x)) * deformationAmount) * (sin((deformationFrequency * point_53.y)) * deformationAmount)) * (sin((deformationFrequency * point_53.z)) * deformationAmount)) + (2.0 - distance_55));
      distance_55 = tmpvar_57;
      vec3 point_58;
      point_58 = (tmpvar_37 + vec3(0.0, 0.0, 0.01));
      int i_59;
      float distance_60;
      distance_60 = 0.0;
      i_59 = 0;
      for (int i_59 = 0; i_59 < 20; i_59++) {
        vec3 tmpvar_61;
        tmpvar_61 = (point_58 - metaballs[i_59].xyz);
        distance_60 = (distance_60 + (metaballs[i_59].w / (((tmpvar_61.x * tmpvar_61.x) + (tmpvar_61.y * tmpvar_61.y)) + (tmpvar_61.z * tmpvar_61.z))));
        //i_59 = (i_59 + 1);
      };
      float tmpvar_62;
      tmpvar_62 = ((((sin((deformationFrequency * point_58.x)) * deformationAmount) * (sin((deformationFrequency * point_58.y)) * deformationAmount)) * (sin((deformationFrequency * point_58.z)) * deformationAmount)) + (2.0 - distance_60));
      distance_60 = tmpvar_62;
      vec3 point_63;
      point_63 = (tmpvar_37 - vec3(0.0, 0.0, 0.01));
      int i_64;
      float distance_65;
      distance_65 = 0.0;
      i_64 = 0;
      for (int i_64 = 0; i_64 < 20; i_64++) {
        vec3 tmpvar_66;
        tmpvar_66 = (point_63 - metaballs[i_64].xyz);
        distance_65 = (distance_65 + (metaballs[i_64].w / (((tmpvar_66.x * tmpvar_66.x) + (tmpvar_66.y * tmpvar_66.y)) + (tmpvar_66.z * tmpvar_66.z))));
        //i_64 = (i_64 + 1);
      };
      float tmpvar_67;
      tmpvar_67 = ((((sin((deformationFrequency * point_63.x)) * deformationAmount) * (sin((deformationFrequency * point_63.y)) * deformationAmount)) * (sin((deformationFrequency * point_63.z)) * deformationAmount)) + (2.0 - distance_65));
      distance_65 = tmpvar_67;
      vec3 tmpvar_68;
      tmpvar_68.x = (tmpvar_42 - tmpvar_47);
      tmpvar_68.y = (tmpvar_52 - tmpvar_57);
      tmpvar_68.z = (tmpvar_62 - tmpvar_67);
      tmpvar_6 = bool(1);
      tmpvar_7 = tmpvar_37;
      tmpvar_8 = normalize(tmpvar_68);
    };
  };
  color_1 = backgroundColor;
  if (tmpvar_6) {
    int i_69;
    vec3 reflectionColor_70;
    vec3 tmpvar_71;
    vec3 tmpvar_72;
    int i_73;
    vec3 refractionColor_74;
    vec3 tmpvar_75;
    vec3 tmpvar_76;
    vec3 tmpvar_77;
    float k_78;
    k_78 = (1.0 - ((1.0 - (dot (tmpvar_8, tmpvar_5) * dot (tmpvar_8, tmpvar_5))) * 0.9604));
    if ((k_78 < 0.0)) {
      tmpvar_77 = vec3(0.0, 0.0, 0.0);
    } else {
      tmpvar_77 = ((0.98 * tmpvar_5) - (((0.98 * dot (tmpvar_8, tmpvar_5)) + sqrt(k_78)) * tmpvar_8));
    };
    vec3 tmpvar_79;
    tmpvar_79 = normalize(tmpvar_77);
    tmpvar_75 = (tmpvar_7 + (tmpvar_79 * 0.1));
    tmpvar_76 = tmpvar_79;
    float tmpvar_80;
    tmpvar_80 = dot (tmpvar_79, vec3(0.0, 2.0, 0.0));
    float tmpvar_81;
    tmpvar_81 = dot (tmpvar_79, vec3(-2.0, 0.5, 0.0));
    refractionColor_74 = ((clamp ((vec3(max (pow (clamp ((sin(tmpvar_80) + 1.0), 0.0, 1.0), 0.15), 0.5)) * baseLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)) + clamp ((vec3((pow (clamp ((sin(tmpvar_80) - 0.83), 0.0, 1.0), 0.2) * pow ((sin(tmpvar_80) - 0.9), 0.4))) * spotLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))) + clamp ((vec3((pow (clamp ((sin(tmpvar_81) - 0.9), 0.0, 1.0), 0.3) * pow ((sin(tmpvar_81) - 0.9), 0.4))) * spot2LightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)));
    i_73 = 0;
    for (int i_73 = 0; i_73 < 2; i_73++) {
      bool tmpvar_82;
      vec3 tmpvar_83;
      vec3 tmpvar_84;
      tmpvar_82 = bool(0);
      vec3 tmpvar_85;
      tmpvar_85 = ((vec3(-7.0, -7.0, -10.0) - tmpvar_75) / tmpvar_76);
      vec3 tmpvar_86;
      tmpvar_86 = ((vec3(7.0, 7.0, 2.0) - tmpvar_75) / tmpvar_76);
      vec3 tmpvar_87;
      tmpvar_87 = max (tmpvar_86, tmpvar_85);
      vec3 tmpvar_88;
      tmpvar_88 = min (tmpvar_86, tmpvar_85);
      float tmpvar_89;
      tmpvar_89 = min (tmpvar_87.x, min (tmpvar_87.y, tmpvar_87.z));
      float tmpvar_90;
      tmpvar_90 = max (max (tmpvar_88.x, 0.0), max (tmpvar_88.y, tmpvar_88.z));
      if ((tmpvar_89 > tmpvar_90)) {
        vec3 tmpvar_91;
        tmpvar_91 = tmpvar_76;
        float val_92;
        bool tmpvar_93;
        bool tmpvar_94;
        tmpvar_94 = bool(0);
        int i_95;
        float left_96;
        vec3 point_97;
        float time_98;
        float step_99;
        step_99 = ((tmpvar_89 - tmpvar_90) / 15.0);
        time_98 = tmpvar_90;
        vec3 tmpvar_100;
        tmpvar_100 = (tmpvar_75 + (tmpvar_90 * tmpvar_76));
        point_97 = tmpvar_100;
        vec3 point_101;
        point_101 = tmpvar_100;
        int i_102;
        float distance_103;
        distance_103 = 0.0;
        i_102 = 0;
        for (int i_102 = 0; i_102 < 20; i_102++) {
          vec3 tmpvar_104;
          tmpvar_104 = (point_101 - metaballs[i_102].xyz);
          distance_103 = (distance_103 + (metaballs[i_102].w / (((tmpvar_104.x * tmpvar_104.x) + (tmpvar_104.y * tmpvar_104.y)) + (tmpvar_104.z * tmpvar_104.z))));
          //i_102 = (i_102 + 1);
        };
        float tmpvar_105;
        tmpvar_105 = ((((sin((deformationFrequency * tmpvar_100.x)) * deformationAmount) * (sin((deformationFrequency * tmpvar_100.y)) * deformationAmount)) * (sin((deformationFrequency * tmpvar_100.z)) * deformationAmount)) + (2.0 - distance_103));
        distance_103 = tmpvar_105;
        left_96 = tmpvar_105;
        i_95 = 0;
        for (int i_95 = 0; i_95 < 15; i_95++) {
          float tmpvar_106;
          tmpvar_106 = (time_98 + step_99);
          time_98 = tmpvar_106;
          vec3 tmpvar_107;
          tmpvar_107 = (point_97 + (step_99 * tmpvar_91));
          point_97 = tmpvar_107;
          vec3 point_108;
          point_108 = tmpvar_107;
          int i_109;
          float distance_110;
          distance_110 = 0.0;
          i_109 = 0;
          for (int i_109 = 0; i_109 < 20; i_109++) {
            vec3 tmpvar_111;
            tmpvar_111 = (point_108 - metaballs[i_109].xyz);
            distance_110 = (distance_110 + (metaballs[i_109].w / (((tmpvar_111.x * tmpvar_111.x) + (tmpvar_111.y * tmpvar_111.y)) + (tmpvar_111.z * tmpvar_111.z))));
            //i_109 = (i_109 + 1);
          };
          float tmpvar_112;
          tmpvar_112 = ((((sin((deformationFrequency * tmpvar_107.x)) * deformationAmount) * (sin((deformationFrequency * tmpvar_107.y)) * deformationAmount)) * (sin((deformationFrequency * tmpvar_107.z)) * deformationAmount)) + (2.0 - distance_110));
          distance_110 = tmpvar_112;
          if (((left_96 * tmpvar_112) < 0.0)) {
            val_92 = (tmpvar_106 + ((tmpvar_112 * step_99) / (left_96 - tmpvar_112)));
            tmpvar_93 = bool(1);
            tmpvar_94 = bool(1);
            break;
          };
          left_96 = tmpvar_112;
          //i_95 = (i_95 + 1);
        };
        if (!(tmpvar_94)) {
          tmpvar_93 = bool(0);
          tmpvar_94 = bool(1);
        };
        if (tmpvar_93) {
          vec3 tmpvar_113;
          tmpvar_113 = (tmpvar_75 + (tmpvar_76 * val_92));
          vec3 point_114;
          point_114 = (tmpvar_113 + vec3(0.01, 0.0, 0.0));
          int i_115;
          float distance_116;
          distance_116 = 0.0;
          i_115 = 0;

          float tmpvar_118;
          tmpvar_118 = ((((sin((deformationFrequency * point_114.x)) * deformationAmount) * (sin((deformationFrequency * point_114.y)) * deformationAmount)) * (sin((deformationFrequency * point_114.z)) * deformationAmount)) + (2.0 - distance_116));
          distance_116 = tmpvar_118;
          vec3 point_119;
          point_119 = (tmpvar_113 - vec3(0.01, 0.0, 0.0));
          int i_120;
          float distance_121;
          distance_121 = 0.0;
          i_120 = 0;

          float tmpvar_123;
          tmpvar_123 = ((((sin((deformationFrequency * point_119.x)) * deformationAmount) * (sin((deformationFrequency * point_119.y)) * deformationAmount)) * (sin((deformationFrequency * point_119.z)) * deformationAmount)) + (2.0 - distance_121));
          distance_121 = tmpvar_123;
          vec3 point_124;
          point_124 = (tmpvar_113 + vec3(0.0, 0.01, 0.0));
          int i_125;
          float distance_126;
          distance_126 = 0.0;
          i_125 = 0;

          float tmpvar_128;
          tmpvar_128 = ((((sin((deformationFrequency * point_124.x)) * deformationAmount) * (sin((deformationFrequency * point_124.y)) * deformationAmount)) * (sin((deformationFrequency * point_124.z)) * deformationAmount)) + (2.0 - distance_126));
          distance_126 = tmpvar_128;
          vec3 point_129;
          point_129 = (tmpvar_113 - vec3(0.0, 0.01, 0.0));
          int i_130;
          float distance_131;
          distance_131 = 0.0;
          i_130 = 0;

          float tmpvar_133;
          tmpvar_133 = ((((sin((deformationFrequency * point_129.x)) * deformationAmount) * (sin((deformationFrequency * point_129.y)) * deformationAmount)) * (sin((deformationFrequency * point_129.z)) * deformationAmount)) + (2.0 - distance_131));
          distance_131 = tmpvar_133;
          vec3 point_134;
          point_134 = (tmpvar_113 + vec3(0.0, 0.0, 0.01));
          int i_135;
          float distance_136;
          distance_136 = 0.0;
          i_135 = 0;

          float tmpvar_138;
          tmpvar_138 = ((((sin((deformationFrequency * point_134.x)) * deformationAmount) * (sin((deformationFrequency * point_134.y)) * deformationAmount)) * (sin((deformationFrequency * point_134.z)) * deformationAmount)) + (2.0 - distance_136));
          distance_136 = tmpvar_138;
          vec3 point_139;
          point_139 = (tmpvar_113 - vec3(0.0, 0.0, 0.01));
          int i_140;
          float distance_141;
          distance_141 = 0.0;
          i_140 = 0;

          float tmpvar_143;
          tmpvar_143 = ((((sin((deformationFrequency * point_139.x)) * deformationAmount) * (sin((deformationFrequency * point_139.y)) * deformationAmount)) * (sin((deformationFrequency * point_139.z)) * deformationAmount)) + (2.0 - distance_141));
          distance_141 = tmpvar_143;
          vec3 tmpvar_144;
          tmpvar_144.x = (tmpvar_118 - tmpvar_123);
          tmpvar_144.y = (tmpvar_128 - tmpvar_133);
          tmpvar_144.z = (tmpvar_138 - tmpvar_143);
          tmpvar_82 = bool(1);
          tmpvar_83 = tmpvar_113;
          tmpvar_84 = normalize(tmpvar_144);
        };
      };
      if (tmpvar_82) {
        vec3 tmpvar_145;
        float k_146;
        k_146 = (1.0 - ((1.0 - (dot (tmpvar_84, tmpvar_76) * dot (tmpvar_84, tmpvar_76))) * 0.9604));
        if ((k_146 < 0.0)) {
          tmpvar_145 = vec3(0.0, 0.0, 0.0);
        } else {
          tmpvar_145 = ((0.98 * tmpvar_76) - (((0.98 * dot (tmpvar_84, tmpvar_76)) + sqrt(k_146)) * tmpvar_84));
        };
        vec3 tmpvar_147;
        tmpvar_147 = normalize(tmpvar_145);
        tmpvar_75 = (tmpvar_83 + (tmpvar_147 * 0.1));
        tmpvar_76 = tmpvar_147;
        float tmpvar_148;
        tmpvar_148 = dot (tmpvar_147, vec3(0.0, 2.0, 0.0));
        float tmpvar_149;
        tmpvar_149 = dot (tmpvar_147, vec3(-2.0, 0.5, 0.0));
        refractionColor_74 = ((clamp ((vec3(max (pow (clamp ((sin(tmpvar_148) + 1.0), 0.0, 1.0), 0.15), 0.5)) * baseLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)) + clamp ((vec3((pow (clamp ((sin(tmpvar_148) - 0.83), 0.0, 1.0), 0.2) * pow ((sin(tmpvar_148) - 0.9), 0.4))) * spotLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))) + clamp ((vec3((pow (clamp ((sin(tmpvar_149) - 0.9), 0.0, 1.0), 0.3) * pow ((sin(tmpvar_149) - 0.9), 0.4))) * spot2LightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)));
      } else {
        break;
      };
      //i_73 = (i_73 + 1);
    };
    vec3 tmpvar_150;
    tmpvar_150 = (refractionColor_74 * objectColor);
    refractionColor_74 = tmpvar_150;
    vec3 tmpvar_151;
    tmpvar_151 = normalize((tmpvar_5 - (2.0 * (dot (tmpvar_8, tmpvar_5) * tmpvar_8))));
    tmpvar_71 = (tmpvar_7 - (tmpvar_5 * 0.1));
    tmpvar_72 = tmpvar_151;
    float tmpvar_152;
    tmpvar_152 = dot (tmpvar_151, vec3(0.0, 2.0, 0.0));
    float tmpvar_153;
    tmpvar_153 = dot (tmpvar_151, vec3(-2.0, 0.5, 0.0));
    reflectionColor_70 = ((clamp ((vec3(max (pow (clamp ((sin(tmpvar_152) + 1.0), 0.0, 1.0), 0.15), 0.5)) * baseLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)) + clamp ((vec3((pow (clamp ((sin(tmpvar_152) - 0.83), 0.0, 1.0), 0.2) * pow ((sin(tmpvar_152) - 0.9), 0.4))) * spotLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))) + clamp ((vec3((pow (clamp ((sin(tmpvar_153) - 0.9), 0.0, 1.0), 0.3) * pow ((sin(tmpvar_153) - 0.9), 0.4))) * spot2LightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)));
    i_69 = 0;
    for (int i_69 = 0; i_69 < 2; i_69++) {
      bool tmpvar_154;
      vec3 tmpvar_155;
      vec3 tmpvar_156;
      tmpvar_154 = bool(0);
      vec3 tmpvar_157;
      tmpvar_157 = ((vec3(-7.0, -7.0, -10.0) - tmpvar_71) / tmpvar_72);
      vec3 tmpvar_158;
      tmpvar_158 = ((vec3(7.0, 7.0, 2.0) - tmpvar_71) / tmpvar_72);
      vec3 tmpvar_159;
      tmpvar_159 = max (tmpvar_158, tmpvar_157);
      vec3 tmpvar_160;
      tmpvar_160 = min (tmpvar_158, tmpvar_157);
      float tmpvar_161;
      tmpvar_161 = min (tmpvar_159.x, min (tmpvar_159.y, tmpvar_159.z));
      float tmpvar_162;
      tmpvar_162 = max (max (tmpvar_160.x, 0.0), max (tmpvar_160.y, tmpvar_160.z));
      if ((tmpvar_161 > tmpvar_162)) {
        vec3 tmpvar_163;
        tmpvar_163 = tmpvar_72;
        float val_164;
        bool tmpvar_165;
        bool tmpvar_166;
        tmpvar_166 = bool(0);
        int i_167;
        float left_168;
        vec3 point_169;
        float time_170;
        float step_171;
        step_171 = ((tmpvar_161 - tmpvar_162) / 15.0);
        time_170 = tmpvar_162;
        vec3 tmpvar_172;
        tmpvar_172 = (tmpvar_71 + (tmpvar_162 * tmpvar_72));
        point_169 = tmpvar_172;
        vec3 point_173;
        point_173 = tmpvar_172;
        int i_174;
        float distance_175;
        distance_175 = 0.0;
        i_174 = 0;
        for (int i_174 = 0; i_174 < 20; i_174++) {
          vec3 tmpvar_176;
          tmpvar_176 = (point_173 - metaballs[i_174].xyz);
          distance_175 = (distance_175 + (metaballs[i_174].w / (((tmpvar_176.x * tmpvar_176.x) + (tmpvar_176.y * tmpvar_176.y)) + (tmpvar_176.z * tmpvar_176.z))));
          //i_174 = (i_174 + 1);
        };
        float tmpvar_177;
        tmpvar_177 = ((((sin((deformationFrequency * tmpvar_172.x)) * deformationAmount) * (sin((deformationFrequency * tmpvar_172.y)) * deformationAmount)) * (sin((deformationFrequency * tmpvar_172.z)) * deformationAmount)) + (2.0 - distance_175));
        distance_175 = tmpvar_177;
        left_168 = tmpvar_177;
        i_167 = 0;
        for (int i_167 = 0; i_167 < 15; i_167++) {
          float tmpvar_178;
          tmpvar_178 = (time_170 + step_171);
          time_170 = tmpvar_178;
          vec3 tmpvar_179;
          tmpvar_179 = (point_169 + (step_171 * tmpvar_163));
          point_169 = tmpvar_179;
          vec3 point_180;
          point_180 = tmpvar_179;
          int i_181;
          float distance_182;
          distance_182 = 0.0;
          i_181 = 0;
          for (int i_181 = 0; i_181 < 20; i_181++) {
            vec3 tmpvar_183;
            tmpvar_183 = (point_180 - metaballs[i_181].xyz);
            distance_182 = (distance_182 + (metaballs[i_181].w / (((tmpvar_183.x * tmpvar_183.x) + (tmpvar_183.y * tmpvar_183.y)) + (tmpvar_183.z * tmpvar_183.z))));
            //i_181 = (i_181 + 1);
          };
          float tmpvar_184;
          tmpvar_184 = ((((sin((deformationFrequency * tmpvar_179.x)) * deformationAmount) * (sin((deformationFrequency * tmpvar_179.y)) * deformationAmount)) * (sin((deformationFrequency * tmpvar_179.z)) * deformationAmount)) + (2.0 - distance_182));
          distance_182 = tmpvar_184;
          if (((left_168 * tmpvar_184) < 0.0)) {
            val_164 = (tmpvar_178 + ((tmpvar_184 * step_171) / (left_168 - tmpvar_184)));
            tmpvar_165 = bool(1);
            tmpvar_166 = bool(1);
            break;
          };
          left_168 = tmpvar_184;
          //i_167 = (i_167 + 1);
        };
        if (!(tmpvar_166)) {
          tmpvar_165 = bool(0);
          tmpvar_166 = bool(1);
        };
        if (tmpvar_165) {
          vec3 tmpvar_185;
          tmpvar_185 = (tmpvar_71 + (tmpvar_72 * val_164));
          vec3 point_186;
          point_186 = (tmpvar_185 + vec3(0.01, 0.0, 0.0));
          int i_187;
          float distance_188;
          distance_188 = 0.0;
          i_187 = 0;

          float tmpvar_190;
          tmpvar_190 = ((((sin((deformationFrequency * point_186.x)) * deformationAmount) * (sin((deformationFrequency * point_186.y)) * deformationAmount)) * (sin((deformationFrequency * point_186.z)) * deformationAmount)) + (2.0 - distance_188));
          distance_188 = tmpvar_190;
          vec3 point_191;
          point_191 = (tmpvar_185 - vec3(0.01, 0.0, 0.0));
          int i_192;
          float distance_193;
          distance_193 = 0.0;
          i_192 = 0;

          float tmpvar_195;
          tmpvar_195 = ((((sin((deformationFrequency * point_191.x)) * deformationAmount) * (sin((deformationFrequency * point_191.y)) * deformationAmount)) * (sin((deformationFrequency * point_191.z)) * deformationAmount)) + (2.0 - distance_193));
          distance_193 = tmpvar_195;
          vec3 point_196;
          point_196 = (tmpvar_185 + vec3(0.0, 0.01, 0.0));
          int i_197;
          float distance_198;
          distance_198 = 0.0;
          i_197 = 0;

          float tmpvar_200;
          tmpvar_200 = ((((sin((deformationFrequency * point_196.x)) * deformationAmount) * (sin((deformationFrequency * point_196.y)) * deformationAmount)) * (sin((deformationFrequency * point_196.z)) * deformationAmount)) + (2.0 - distance_198));
          distance_198 = tmpvar_200;
          vec3 point_201;
          point_201 = (tmpvar_185 - vec3(0.0, 0.01, 0.0));
          int i_202;
          float distance_203;
          distance_203 = 0.0;
          i_202 = 0;

          float tmpvar_205;
          tmpvar_205 = ((((sin((deformationFrequency * point_201.x)) * deformationAmount) * (sin((deformationFrequency * point_201.y)) * deformationAmount)) * (sin((deformationFrequency * point_201.z)) * deformationAmount)) + (2.0 - distance_203));
          distance_203 = tmpvar_205;
          vec3 point_206;
          point_206 = (tmpvar_185 + vec3(0.0, 0.0, 0.01));
          int i_207;
          float distance_208;
          distance_208 = 0.0;
          i_207 = 0;

          float tmpvar_210;
          tmpvar_210 = ((((sin((deformationFrequency * point_206.x)) * deformationAmount) * (sin((deformationFrequency * point_206.y)) * deformationAmount)) * (sin((deformationFrequency * point_206.z)) * deformationAmount)) + (2.0 - distance_208));
          distance_208 = tmpvar_210;
          vec3 point_211;
          point_211 = (tmpvar_185 - vec3(0.0, 0.0, 0.01));
          int i_212;
          float distance_213;
          distance_213 = 0.0;
          i_212 = 0;

          float tmpvar_215;
          tmpvar_215 = ((((sin((deformationFrequency * point_211.x)) * deformationAmount) * (sin((deformationFrequency * point_211.y)) * deformationAmount)) * (sin((deformationFrequency * point_211.z)) * deformationAmount)) + (2.0 - distance_213));
          distance_213 = tmpvar_215;
          vec3 tmpvar_216;
          tmpvar_216.x = (tmpvar_190 - tmpvar_195);
          tmpvar_216.y = (tmpvar_200 - tmpvar_205);
          tmpvar_216.z = (tmpvar_210 - tmpvar_215);
          tmpvar_154 = bool(1);
          tmpvar_155 = tmpvar_185;
          tmpvar_156 = normalize(tmpvar_216);
        };
      };
      if (tmpvar_154) {
        vec3 tmpvar_217;
        tmpvar_217 = normalize((tmpvar_72 - (2.0 * (dot (tmpvar_156, tmpvar_72) * tmpvar_156))));
        tmpvar_71 = (tmpvar_155 - (tmpvar_72 * 0.1));
        tmpvar_72 = tmpvar_217;
        float tmpvar_218;
        tmpvar_218 = dot (tmpvar_217, vec3(0.0, 2.0, 0.0));
        float tmpvar_219;
        tmpvar_219 = dot (tmpvar_217, vec3(-2.0, 0.5, 0.0));
        reflectionColor_70 = mix (reflectionColor_70, ((clamp ((vec3(max (pow (clamp ((sin(tmpvar_218) + 1.0), 0.0, 1.0), 0.15), 0.5)) * baseLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)) + clamp ((vec3((pow (clamp ((sin(tmpvar_218) - 0.83), 0.0, 1.0), 0.2) * pow ((sin(tmpvar_218) - 0.9), 0.4))) * spotLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))) + clamp ((vec3((pow (clamp ((sin(tmpvar_219) - 0.9), 0.0, 1.0), 0.3) * pow ((sin(tmpvar_219) - 0.9), 0.4))) * spot2LightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.5);
      } else {
        break;
      };
      //i_69 = (i_69 + 1);
    };
    color_1 = (mix (tmpvar_150, reflectionColor_70, 0.5) + clamp ((pow (abs(tmpvar_8.x), 8.0) + pow (abs(tmpvar_8.y), 8.0)), 0.0, 0.2));
  };
  vec3 tmpvar_220;
  tmpvar_220 = (pow (color_1, vec3(2.5, 2.5, 2.5)) - min ((pow (uvLength_2, 5.0) * 0.45), 0.1));
  color_1 = tmpvar_220;
  vec4 tmpvar_221;
  tmpvar_221.w = 1.0;
  tmpvar_221.xyz = tmpvar_220;
  gl_FragColor = tmpvar_221;
}

