uniform vec2 resolution;
uniform vec3 objectColor;
uniform vec3 backgroundColor;
uniform vec3 baseLightColor;
uniform vec3 spotLightColor;
uniform vec3 spot2LightColor;
uniform float deformationFrequency;
uniform float deformationAmount;
uniform vec3 camera;
uniform vec4 metaballs[20];
void main ()
{
  vec3 color_1;
  vec2 uv_2;
  vec2 tmpvar_3;
  tmpvar_3 = ((gl_FragCoord.xy / resolution) - 0.5);
  uv_2.y = tmpvar_3.y;
  uv_2.x = (tmpvar_3.x * (resolution.x / resolution.y));
  vec3 tmpvar_4;
  tmpvar_4.z = 1.0;
  tmpvar_4.xy = uv_2;
  bool tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_5 = bool(0);
  vec3 tmpvar_7;
  tmpvar_7 = ((vec3(-7.0, -7.0, -10.0) - camera) / tmpvar_4);
  vec3 tmpvar_8;
  tmpvar_8 = ((vec3(7.0, 7.0, 2.0) - camera) / tmpvar_4);
  vec3 tmpvar_9;
  tmpvar_9 = max (tmpvar_8, tmpvar_7);
  vec3 tmpvar_10;
  tmpvar_10 = min (tmpvar_8, tmpvar_7);
  float tmpvar_11;
  tmpvar_11 = min (tmpvar_9.x, min (tmpvar_9.y, tmpvar_9.z));
  float tmpvar_12;
  tmpvar_12 = max (max (tmpvar_10.x, 0.0), max (tmpvar_10.y, tmpvar_10.z));
  if ((tmpvar_11 > tmpvar_12)) {
    vec3 tmpvar_13;
    tmpvar_13 = tmpvar_4;
    float val_14;
    bool tmpvar_15;
    bool tmpvar_16;
    tmpvar_16 = bool(0);
    int i_17;
    float left_18;
    vec3 point_19;
    float time_20;
    float step_21;
    step_21 = ((tmpvar_11 - tmpvar_12) / 15.0);
    time_20 = tmpvar_12;
    vec3 tmpvar_22;
    tmpvar_22 = (camera + (tmpvar_12 * tmpvar_4));
    point_19 = tmpvar_22;
    vec3 point_23;
    point_23 = tmpvar_22;
    int i_24;
    float distance_25;
    distance_25 = 0.0;
    i_24 = 0;
    for (int i_24 = 0; i_24 < 20; i_24++) {
      vec3 tmpvar_26;
      tmpvar_26 = (point_23 - metaballs[i_24].xyz);
      distance_25 = (distance_25 + (metaballs[i_24].w / (((tmpvar_26.x * tmpvar_26.x) + (tmpvar_26.y * tmpvar_26.y)) + (tmpvar_26.z * tmpvar_26.z))));
      //i_24 = (i_24 + 1);
    };
    float tmpvar_27;
    tmpvar_27 = ((((sin((deformationFrequency * tmpvar_22.x)) * deformationAmount) * (sin((deformationFrequency * tmpvar_22.y)) * deformationAmount)) * (sin((deformationFrequency * tmpvar_22.z)) * deformationAmount)) + (2.0 - distance_25));
    distance_25 = tmpvar_27;
    left_18 = tmpvar_27;
    i_17 = 0;
    for (int i_17 = 0; i_17 < 15; i_17++) {
      float tmpvar_28;
      tmpvar_28 = (time_20 + step_21);
      time_20 = tmpvar_28;
      vec3 tmpvar_29;
      tmpvar_29 = (point_19 + (step_21 * tmpvar_13));
      point_19 = tmpvar_29;
      vec3 point_30;
      point_30 = tmpvar_29;
      int i_31;
      float distance_32;
      distance_32 = 0.0;
      i_31 = 0;
      for (int i_31 = 0; i_31 < 20; i_31++) {
        vec3 tmpvar_33;
        tmpvar_33 = (point_30 - metaballs[i_31].xyz);
        distance_32 = (distance_32 + (metaballs[i_31].w / (((tmpvar_33.x * tmpvar_33.x) + (tmpvar_33.y * tmpvar_33.y)) + (tmpvar_33.z * tmpvar_33.z))));
        //i_31 = (i_31 + 1);
      };
      float tmpvar_34;
      tmpvar_34 = ((((sin((deformationFrequency * tmpvar_29.x)) * deformationAmount) * (sin((deformationFrequency * tmpvar_29.y)) * deformationAmount)) * (sin((deformationFrequency * tmpvar_29.z)) * deformationAmount)) + (2.0 - distance_32));
      distance_32 = tmpvar_34;
      if (((left_18 * tmpvar_34) < 0.0)) {
        val_14 = (tmpvar_28 + ((tmpvar_34 * step_21) / (left_18 - tmpvar_34)));
        tmpvar_15 = bool(1);
        tmpvar_16 = bool(1);
        break;
      };
      left_18 = tmpvar_34;
      //i_17 = (i_17 + 1);
    };
    if (!(tmpvar_16)) {
      tmpvar_15 = bool(0);
      tmpvar_16 = bool(1);
    };
    if (tmpvar_15) {
      vec3 tmpvar_35;
      tmpvar_35 = (camera + (tmpvar_4 * val_14));
      vec3 point_36;
      point_36 = (tmpvar_35 + vec3(0.01, 0.0, 0.0));
      int i_37;
      float distance_38;
      distance_38 = 0.0;
      i_37 = 0;
      for (int i_37 = 0; i_37 < 20; i_37++) {
        vec3 tmpvar_39;
        tmpvar_39 = (point_36 - metaballs[i_37].xyz);
        distance_38 = (distance_38 + (metaballs[i_37].w / (((tmpvar_39.x * tmpvar_39.x) + (tmpvar_39.y * tmpvar_39.y)) + (tmpvar_39.z * tmpvar_39.z))));
        //i_37 = (i_37 + 1);
      };
      float tmpvar_40;
      tmpvar_40 = ((((sin((deformationFrequency * point_36.x)) * deformationAmount) * (sin((deformationFrequency * point_36.y)) * deformationAmount)) * (sin((deformationFrequency * point_36.z)) * deformationAmount)) + (2.0 - distance_38));
      distance_38 = tmpvar_40;
      vec3 point_41;
      point_41 = (tmpvar_35 - vec3(0.01, 0.0, 0.0));
      int i_42;
      float distance_43;
      distance_43 = 0.0;
      i_42 = 0;
      for (int i_42 = 0; i_42 < 20; i_42++) {
        vec3 tmpvar_44;
        tmpvar_44 = (point_41 - metaballs[i_42].xyz);
        distance_43 = (distance_43 + (metaballs[i_42].w / (((tmpvar_44.x * tmpvar_44.x) + (tmpvar_44.y * tmpvar_44.y)) + (tmpvar_44.z * tmpvar_44.z))));
        //i_42 = (i_42 + 1);
      };
      float tmpvar_45;
      tmpvar_45 = ((((sin((deformationFrequency * point_41.x)) * deformationAmount) * (sin((deformationFrequency * point_41.y)) * deformationAmount)) * (sin((deformationFrequency * point_41.z)) * deformationAmount)) + (2.0 - distance_43));
      distance_43 = tmpvar_45;
      vec3 point_46;
      point_46 = (tmpvar_35 + vec3(0.0, 0.01, 0.0));
      int i_47;
      float distance_48;
      distance_48 = 0.0;
      i_47 = 0;
      for (int i_47 = 0; i_47 < 20; i_47++) {
        vec3 tmpvar_49;
        tmpvar_49 = (point_46 - metaballs[i_47].xyz);
        distance_48 = (distance_48 + (metaballs[i_47].w / (((tmpvar_49.x * tmpvar_49.x) + (tmpvar_49.y * tmpvar_49.y)) + (tmpvar_49.z * tmpvar_49.z))));
        //i_47 = (i_47 + 1);
      };
      float tmpvar_50;
      tmpvar_50 = ((((sin((deformationFrequency * point_46.x)) * deformationAmount) * (sin((deformationFrequency * point_46.y)) * deformationAmount)) * (sin((deformationFrequency * point_46.z)) * deformationAmount)) + (2.0 - distance_48));
      distance_48 = tmpvar_50;
      vec3 point_51;
      point_51 = (tmpvar_35 - vec3(0.0, 0.01, 0.0));
      int i_52;
      float distance_53;
      distance_53 = 0.0;
      i_52 = 0;
      for (int i_52 = 0; i_52 < 20; i_52++) {
        vec3 tmpvar_54;
        tmpvar_54 = (point_51 - metaballs[i_52].xyz);
        distance_53 = (distance_53 + (metaballs[i_52].w / (((tmpvar_54.x * tmpvar_54.x) + (tmpvar_54.y * tmpvar_54.y)) + (tmpvar_54.z * tmpvar_54.z))));
        //i_52 = (i_52 + 1);
      };
      float tmpvar_55;
      tmpvar_55 = ((((sin((deformationFrequency * point_51.x)) * deformationAmount) * (sin((deformationFrequency * point_51.y)) * deformationAmount)) * (sin((deformationFrequency * point_51.z)) * deformationAmount)) + (2.0 - distance_53));
      distance_53 = tmpvar_55;
      vec3 point_56;
      point_56 = (tmpvar_35 + vec3(0.0, 0.0, 0.01));
      int i_57;
      float distance_58;
      distance_58 = 0.0;
      i_57 = 0;
      for (int i_57 = 0; i_57 < 20; i_57++) {
        vec3 tmpvar_59;
        tmpvar_59 = (point_56 - metaballs[i_57].xyz);
        distance_58 = (distance_58 + (metaballs[i_57].w / (((tmpvar_59.x * tmpvar_59.x) + (tmpvar_59.y * tmpvar_59.y)) + (tmpvar_59.z * tmpvar_59.z))));
        //i_57 = (i_57 + 1);
      };
      float tmpvar_60;
      tmpvar_60 = ((((sin((deformationFrequency * point_56.x)) * deformationAmount) * (sin((deformationFrequency * point_56.y)) * deformationAmount)) * (sin((deformationFrequency * point_56.z)) * deformationAmount)) + (2.0 - distance_58));
      distance_58 = tmpvar_60;
      vec3 point_61;
      point_61 = (tmpvar_35 - vec3(0.0, 0.0, 0.01));
      int i_62;
      float distance_63;
      distance_63 = 0.0;
      i_62 = 0;
      for (int i_62 = 0; i_62 < 20; i_62++) {
        vec3 tmpvar_64;
        tmpvar_64 = (point_61 - metaballs[i_62].xyz);
        distance_63 = (distance_63 + (metaballs[i_62].w / (((tmpvar_64.x * tmpvar_64.x) + (tmpvar_64.y * tmpvar_64.y)) + (tmpvar_64.z * tmpvar_64.z))));
        //i_62 = (i_62 + 1);
      };
      float tmpvar_65;
      tmpvar_65 = ((((sin((deformationFrequency * point_61.x)) * deformationAmount) * (sin((deformationFrequency * point_61.y)) * deformationAmount)) * (sin((deformationFrequency * point_61.z)) * deformationAmount)) + (2.0 - distance_63));
      distance_63 = tmpvar_65;
      vec3 tmpvar_66;
      tmpvar_66.x = (tmpvar_40 - tmpvar_45);
      tmpvar_66.y = (tmpvar_50 - tmpvar_55);
      tmpvar_66.z = (tmpvar_60 - tmpvar_65);
      tmpvar_5 = bool(1);
      tmpvar_6 = normalize(tmpvar_66);
    };
  };
  color_1 = backgroundColor;
  if (tmpvar_5) {
    vec3 refractionColor_67;
    vec3 tmpvar_68;
    float k_69;
    k_69 = (1.0 - ((1.0 - (dot (tmpvar_6, tmpvar_4) * dot (tmpvar_6, tmpvar_4))) * 0.9604));
    if ((k_69 < 0.0)) {
      tmpvar_68 = vec3(0.0, 0.0, 0.0);
    } else {
      tmpvar_68 = ((0.98 * tmpvar_4) - (((0.98 * dot (tmpvar_6, tmpvar_4)) + sqrt(k_69)) * tmpvar_6));
    };
    vec3 tmpvar_70;
    tmpvar_70 = normalize(tmpvar_68);
    float tmpvar_71;
    tmpvar_71 = dot (tmpvar_70, vec3(0.0, 2.0, 0.0));
    float tmpvar_72;
    tmpvar_72 = dot (tmpvar_70, vec3(-2.0, 0.5, 0.0));
    refractionColor_67 = ((clamp ((vec3(max (pow (clamp ((sin(tmpvar_71) + 1.0), 0.0, 1.0), 0.15), 0.5)) * baseLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)) + clamp ((vec3((pow (clamp ((sin(tmpvar_71) - 0.83), 0.0, 1.0), 0.2) * pow ((sin(tmpvar_71) - 0.9), 0.4))) * spotLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))) + clamp ((vec3((pow (clamp ((sin(tmpvar_72) - 0.9), 0.0, 1.0), 0.3) * pow ((sin(tmpvar_72) - 0.9), 0.4))) * spot2LightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)));
    vec3 tmpvar_73;
    tmpvar_73 = (refractionColor_67 * objectColor);
    refractionColor_67 = tmpvar_73;
    vec3 tmpvar_74;
    tmpvar_74 = normalize((tmpvar_4 - (2.0 * (dot (tmpvar_6, tmpvar_4) * tmpvar_6))));
    float tmpvar_75;
    tmpvar_75 = dot (tmpvar_74, vec3(0.0, 2.0, 0.0));
    float tmpvar_76;
    tmpvar_76 = dot (tmpvar_74, vec3(-2.0, 0.5, 0.0));
    color_1 = (mix (tmpvar_73, ((clamp ((vec3(max (pow (clamp ((sin(tmpvar_75) + 1.0), 0.0, 1.0), 0.15), 0.5)) * baseLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)) + clamp ((vec3((pow (clamp ((sin(tmpvar_75) - 0.83), 0.0, 1.0), 0.2) * pow ((sin(tmpvar_75) - 0.9), 0.4))) * spotLightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))) + clamp ((vec3((pow (clamp ((sin(tmpvar_76) - 0.9), 0.0, 1.0), 0.3) * pow ((sin(tmpvar_76) - 0.9), 0.4))) * spot2LightColor), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.5) + clamp ((pow (abs(tmpvar_6.x), 8.0) + pow (abs(tmpvar_6.y), 8.0)), 0.0, 0.2));
  };
  vec2 tmpvar_77;
  tmpvar_77 = pow (sin((uv_2 * 1000.0)), vec2(3.0, 3.0));
  vec3 tmpvar_78;
  tmpvar_78 = ((pow (color_1, vec3(4.5, 4.5, 4.5)) * abs(tmpvar_77.y)) * abs(tmpvar_77.x));
  color_1 = tmpvar_78;
  vec4 tmpvar_79;
  tmpvar_79.w = 1.0;
  tmpvar_79.xyz = tmpvar_78;
  gl_FragColor = tmpvar_79;
}

